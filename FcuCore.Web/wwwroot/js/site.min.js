/* jQuery Tiny Pub/Sub - v0.7 - 10/27/2011
 * http://benalman.com/
 * Copyright (c) 2011 "Cowboy" Ben Alman; Licensed MIT, GPL */
(function (a) {
    var b = a({});
    a.subscribe = function () { b.on.apply(b, arguments) }, a.unsubscribe = function () { b.off.apply(b, arguments) }, a
        .publish = function () { b.trigger.apply(b, arguments) }
})(jQuery);
ko.bindingHandlers.bitmask = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const mask = allBindings.get('bit');

        $(element).change(() => {
            let value = ko.unwrap(valueAccessor());
            if ($(element).prop('checked')) {
                value = value | mask;
            } else {
                let invertedMask = 0xFF ^ mask;
                value = value & invertedMask;
            }
            valueAccessor()(value);
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const mask = allBindings.get('bit');
        const value = ko.unwrap(valueAccessor());
        $(element).prop('checked', (value & mask) === mask);
    }
};
ko.bindingHandlers.number = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        $(element).change(() => {
            valueAccessor()(parseInt($(element).val(), 10));
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const value = ko.unwrap(valueAccessor());
        $(element).val(value);
    }
};
(function (window, ko, $) {
    const cbus = {};
    window.cbus = cbus;
    cbus.status = {
        socketConnected: ko.observable(false),
        cbusConnected: ko.observable(false),
        receivedMessagesBuffer: ko.observableArray(),
        showMessages: ko.observable(false),
        toggleDebug: () => cbus.status.showMessages(!cbus.status.showMessages())
    };

    cbus.api = {
        readApi: (controller, action) => {
            return $.ajax({
                url: `/api/${controller}/${action}`,
                method: "GET",
                dataType: "JSON"
            });
        },
        sendApiRequest: (controller, action, data) => {
            return $.ajax({
                url: `/api/${controller}/${action}`,
                data: JSON.stringify(data),
                contentType: 'application/json',
                method: "POST"
            });
        },
        sendQNN: () => {
            cbus.api.sendApiRequest("Manager", "Communications", "enumerate");
        }
    };

    const messageHandlers = [];
    cbus.comms = {
        connect: () => {
            cbus.api.sendApiRequest("Manager", "Communications","open");
        },
        disconnect: () => {
            cbus.api.sendApiRequest("Manager", "Communications","close");
        },
        addHandler: (opCode, handler) => {
            messageHandlers.push({ opCode: opCode, handler: handler });
        },
        configure: () => {
            cbus.api.readApi("Manager", "ConfigureComms").done((d) => {
                cbus.comms.transport(d.transport);
                cbus.comms.serialPort(d.serialPort);
                cbus.comms.availableSerialPorts(d.availableSerialPorts);
                $("#dialog-configure-comms").modal("show");
            });
        },
        transport: ko.observable('Serial'),
        serialPort: ko.observable(''),
        availableSerialPorts: ko.observableArray([]),
        closeConfigure: () => {
            $("#dialog-configure-comms").modal("hide");
        },
        saveConfigure: () => {
            cbus.api.sendApiRequest("Manager", "ConfigureComms", {
                transport: cbus.comms.transport(),
                serialPort: cbus.comms.serialPort()
                });
            $("#dialog-configure-comms").modal("hide");
        }
    };




    const socket = new WebSocket("ws://" + window.location.host + "/ws");
    socket.onmessage = (d) => {
        var msg = JSON.parse(d.data);
        switch (msg.Type) {
            case "cbus":
                cbus.status.receivedMessagesBuffer.push(msg);
                while (cbus.status.receivedMessagesBuffer().length > 20) {
                    cbus.status.receivedMessagesBuffer.shift();
                }
                if (msg.Direction === "received") {
                    var mh = messageHandlers.filter(handler => handler.opCode === msg.Message.OpCode || handler.opCode === msg.Message.OpCodeString);
                    for (var x = 0; x < mh.length; x++) {
                        mh[x].handler(msg.Message);
                    }
                }

                break;
            case "connection-status":
                cbus.status.cbusConnected(msg.IsConnected);
                break;
            default:
                console.warn("Unknown websocket message received: ", d.data);
        }
    };
    socket.onopen = () => {
        cbus.status.socketConnected(true);
    };
    socket.onclose = () => {
        cbus.status.socketConnected(false);
    };

    //TODO: reconnect socket, handle errors

})(window, ko, jQuery);
(function (cbus, ko, $) {

    /*
    function nodeVariable(group, nv, node) {
        this.group = group;
        this.index = nv.index;
        this.nv = nv;
        this.definition = ko.computed(() => {
            if (nv.definition) {
                return nv.definition;
            }

            let targetDefinition;
            if (nv.definitions != undefined) {
                nv.definitions.forEach((d) => {
                    if (typeof (d.condition) === "function") {
                        if (d.condition(node)) {
                            targetDefinition = d.definition;
                        }
                    }
                });
            }
            return targetDefinition;
        });
        let defaultValue = 0;
        if (this.definition() != undefined) {
            defaultValue = this.definition().default;
        }
        this.value = ko.observable(defaultValue);
    }
    */

    function node(config, type) {
        this.nodeType = type;
        this.nodeNumber = config.NodeNumber;
        this.canId = config.CanId;
        this.isConsumerNode = config.IsConsumerNode;
        this.isProducerNode = config.IsProducerNode;
        this.inFlimMode = config.InFlimMode;
        this.supportsBootloader = config.SupportsBootloader;

        this.params = ko.observableArray([]);

        this.minorVersion = ko.computed(() => {
            if (this.params()[2] !== undefined) {
                return String.fromCharCode(this.params()[2]);
            } else {
                return "?";
            }
        });

        this.majorVersion = ko.computed(() => {
            if (this.params()[7] !== undefined) {
                return this.params()[7];
            } else {
                return "";
            }
        });

        this.version = ko.computed(() => {
            return `${this.majorVersion()}${this.minorVersion()}`;
        });

        this.supportedNodeVariables = ko.computed(() => {
            if (this.params()[6] !== undefined) {
                return this.params()[6];
            }
            return -1;
        });


        this.nodeVariables = ko.observableArray([]);
        this.params.subscribe(() => {
            if (this.supportedNodeVariables() !== -1) {
                if (this.nodeVariables().length < this.supportedNodeVariables()) {
                    for (let x = 1; x <= this.supportedNodeVariables(); x++) {
                        if (!this.nodeVariables().find((nv) => nv.index === x)) {
                            this.nodeVariables.push({
                                index: x,
                                value: ko.observable(0)
                            });
                        }
                    }
                }
            }
        });

        /*
        this.nodeVariables = ko.observableArray();
        type.configGroups.forEach(cg => {
            cg.nodeVariables.forEach(nv => {
                this.nodeVariables.push(new nodeVariable(cg, nv, this));
            });
        });
        */
    }

    /*
    node.prototype.getValuesInGroup = function (group) {
        return this.nodeVariables().filter((nv) => nv.group === group);
    };

    node.prototype.getNodeVariableValue = function (index) {
        const nv = this.nodeVariables().find((nv) => nv.nv.index === index);
        if (nv != null) {
            return nv.value();
        }
        return null;
    };
    */

    node.prototype.editNodeVariables = function () {
        if (this.supportedNodeVariables() !== -1) {
            cbus.modules.currentNode(this);
            $("#dialog-edit-node-variables").modal("show");
        } else {
            console.warn('Unknown node variables count - unable to display NV editor');
        }
    };
    node.prototype.closeEditNodeVariables = function() {
        $("#dialog-edit-node-variables").modal("hide");
        cbus.modules.currentNode(null);
    };
    node.prototype.readNodeVariables = function() {
        cbus.api.sendApiRequest("Manager", "ReadNodeVariables", {
            NodeNumber: this.nodeNumber,
            VariableCount: this.supportedNodeVariables()
        });
    };
    /*
    node.prototype.getNodeVariableByIndex = function (i) {
        const nv = this.nodeVariables().find((n) => n.index === i);
        return nv ? nv : null;
    };
    */

    cbus.modules = {
        definitions: {},
        list: ko.observableArray(),
        listFilter: ko.observable(''),
        currentNode: ko.observable(null),
        getByNodeNumber: (n) => {
            var f = cbus.modules.list().filter(m => m.nodeNumber === n);
            if (f.length) {
                return f[0];
            }
            return null;
        }
    };

    cbus.modules.filteredList = ko.computed(() => {
        if (cbus.modules.listFilter() === "")
            return cbus.modules.list();

        return cbus.modules.list().filter((m) => {
            return m.nodeNumber.toString().indexOf(cbus.modules.listFilter()) > -1 ||
                m.nodeType.name.toUpperCase().indexOf(cbus.modules.listFilter().toUpperCase()) > -1;
            
        });
    });

    cbus.comms.addHandler("PNN", (msg) => {
        let md = null;
        for (let m in cbus.modules.definitions) {
            let check = cbus.modules.definitions[m];
            if (check.manufacturerId === msg.ManufacturerId && check.moduleId === msg.ModuleId) {
                md = check;
                break;
            }
        }
        if (md == null) {
            md = cbus.modules.definitions["UNKNOWN"];
        }
        const n = new node(msg, md);
        cbus.modules.list.remove(m => m.canId === n.canId);
        cbus.modules.list.push(n);
    });

    cbus.comms.addHandler(0x9B, (msg) => {
        var n = cbus.modules.getByNodeNumber(msg.NodeNumber);
        n.params()[msg.ParameterIndex] = msg.ParameterValue;
        n.params.notifySubscribers();
    });

    cbus.comms.addHandler(0x97,
        (msg) => {
            const n = cbus.modules.getByNodeNumber(msg.NodeNumber);
            
            const nv = n.nodeVariables().find(x => x.index === msg.VariableIndex);
            if (nv != null) {
                nv.value(msg.VariableValue);
            }
        });

})(window.cbus, ko, jQuery);

cbus.modules.definitions["CANACC4"] = {
    manufacturerId: 165,
    moduleId: 8,
    name: "CANACC4",
    configTabs: [
        {
            name: "General",
            items: [
                {
                    name: "Recharge Time",
                    type: "numeric",
                    nv: 9
                }, {
                    name: "Fire Delay",
                    type: "numeric",
                    nv: 10
                }
            ]
        }, {
            name: "Output Timings",
            items: [
                {
                    name: "Pulse Duration Output 1 A",
                    type: "numeric",
                    nv: 1
                }, {
                    name: "Pulse Duration Output 1 B",
                    type: "numeric",
                    nv: 2
                }, {
                    name: "Pulse Duration Output 2 A",
                    type: "numeric",
                    nv: 3
                }, {
                    name: "Pulse Duration Output 2 B",
                    type: "numeric",
                    nv: 4
                }, {
                    name: "Pulse Duration Output 3 A",
                    type: "numeric",
                    nv: 5
                }, {
                    name: "Pulse Duration Output 3 B",
                    type: "numeric",
                    nv: 6
                }, {
                    name: "Pulse Duration Output 4 A",
                    type: "numeric",
                    nv: 7
                }, {
                    name: "Pulse Duration Output 4 B",
                    type: "numeric",
                    nv: 8
                }
            ]
        }
    ]
};


cbus.modules.definitions["CANACE8C"] = {
    manufacturerId: 165,
    moduleId: 5,
    name: "CANACE8C",
    configTabs: [
        {
            name: "General",
            items: [
                {
                    group: "Input 1",
                    items: [
                        {
                            name: "On/Off or On selection",
                            type: "flag",
                            nv: 1,
                            flagValue: 128
                        }, {
                            name: "Invert Input",
                            type: "flag",
                            nv: 2,
                            flagValue: 128
                        }, {
                            name: "Push button toggle",
                            type: "flag",
                            nv: 6,
                            flagValue: 128
                        }
                    ]

                }
            ]
        }, {
            name: "Advanced",
            items: [
                {
                    group: "Input 1",
                    items: [
                        {
                            name: "Delayed Input",
                            type: "flag",
                            nv: 3,
                            flagValue: 128
                        }, {
                            name: "Disable SOD",
                            type: "flag",
                            nv: 8,
                            flagValue: 128
                        }
                    ]
                }, {
                    name: "Input delay, ON time",
                    type: "numeric",
                    nv: 4
                }, {
                    name: "Input delay, OFF time",
                    type: "numeric",
                    nv: 5
                }
            ]
        }
    ]
};

/*
configGroups: [
        {
            name: "General",
            nodeVariables: [
                {
                    index: 1,
                    definition: {
                        name: "On/Off or On selection",
                        default: 0,
                        type: "bitfield"
                    }
                }, {
                    index: 2,
                    definition: {
                        name: "Invert input",
                        default: 0,
                        type: "bitfield"
                    }
                }, {
                    index: 3,
                    definition: {
                        name: "Enable input delay",
                        default: 0,
                        type: "bitfield"
                    }
                }, {
                    index: 4,
                    definition: {
                        name: "Input delay, ON time",
                        default: 10,
                        type: "numeric"
                    }
                }, {
                    index: 5,
                    definition: {
                        name: "Input delay, OFF time",
                        default: 10,
                        type: "numeric"
                    }
                }, {
                    index: 6,
                    definition: {
                        name: "Push button toggle",
                        default: 0,
                        type: "bitfield"
                    }
                }, {
                    index: 7,
                    definition: {
                        name: "Route options",
                        default: 0,
                        type: "numeric"
                    }
                }, {
                    index: 8,
                    definition: {
                        name: "Disable SOD",
                        default: 0,
                        type: "bitfield"
                    }
                }
            ]
        }
    ]
};
*/
cbus.modules.definitions["UNKNOWN"] = {
    manufacturerId: -1,
    moduleId: -1,
    name: "Unknown",
    configGroups: []
};
// Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


ko.applyBindings(window.cbus);

window.cbus.oncbusmessage = (msg) => {
    console.log(msg.DisplayString, msg);
};
