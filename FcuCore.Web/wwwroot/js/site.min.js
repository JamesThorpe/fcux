/* jQuery Tiny Pub/Sub - v0.7 - 10/27/2011
 * http://benalman.com/
 * Copyright (c) 2011 "Cowboy" Ben Alman; Licensed MIT, GPL */
(function (a) {
    var b = a({});
    a.subscribe = function () { b.on.apply(b, arguments) }, a.unsubscribe = function () { b.off.apply(b, arguments) }, a
        .publish = function () { b.trigger.apply(b, arguments) }
})(jQuery);
ko.bindingHandlers.bitmask = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const mask = allBindings.get('bit');

        $(element).change(() => {
            let value = ko.unwrap(valueAccessor());
            if ($(element).prop('checked')) {
                value = value | mask;
            } else {
                let invertedMask = 0xFF ^ mask;
                value = value & invertedMask;
            }
            valueAccessor()(value);
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const mask = allBindings.get('bit');
        const value = ko.unwrap(valueAccessor());
        $(element).prop('checked', (value & mask) === mask);
    }
};
ko.bindingHandlers.number = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        $(element).change(() => {
            valueAccessor()(parseInt($(element).val(), 10));
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const value = ko.unwrap(valueAccessor());
        $(element).val(value);
    }
};
(function (window, ko, $) {
    const cbus = {};
    window.cbus = cbus;
    cbus.status = {
        socketConnected: ko.observable(false),
        cbusConnected: ko.observable(false),
        receivedMessagesBuffer: ko.observableArray(),
        showMessages: ko.observable(false),
        toggleDebug: () => cbus.status.showMessages(!cbus.status.showMessages())
    };

    cbus.api = {
        readApi: (controller, action) => {
            return $.ajax({
                url: `/api/${controller}/${action}`,
                method: "GET",
                dataType: "JSON"
            });
        },
        sendApiRequest: (controller, action, data) => {
            return $.ajax({
                url: `/api/${controller}/${action}`,
                data: JSON.stringify(data),
                contentType: 'application/json',
                method: "POST"
            });
        },
        sendQNN: () => {
            cbus.api.sendApiRequest("Manager", "Communications", "enumerate");
        }
    };

    const messageHandlers = [];
    cbus.comms = {
        connect: () => {
            cbus.api.sendApiRequest("Manager", "Communications","open");
        },
        disconnect: () => {
            cbus.api.sendApiRequest("Manager", "Communications","close");
        },
        addHandler: (opCode, handler) => {
            messageHandlers.push({ opCode: opCode, handler: handler });
        },
        configure: () => {
            cbus.api.readApi("Manager", "ConfigureComms").done((d) => {
                cbus.comms.transport(d.transport);
                cbus.comms.serialPort(d.serialPort);
                cbus.comms.availableSerialPorts(d.availableSerialPorts);
                $("#dialog-configure-comms").modal("show");
            });
        },
        transport: ko.observable('Serial'),
        serialPort: ko.observable(''),
        availableSerialPorts: ko.observableArray([]),
        closeConfigure: () => {
            $("#dialog-configure-comms").modal("hide");
        },
        saveConfigure: () => {
            cbus.api.sendApiRequest("Manager", "ConfigureComms", {
                transport: cbus.comms.transport(),
                serialPort: cbus.comms.serialPort()
                });
            $("#dialog-configure-comms").modal("hide");
        }
    };




    const socket = new WebSocket("ws://" + window.location.host + "/ws");
    socket.onmessage = (d) => {
        var msg = JSON.parse(d.data);
        switch (msg.Type) {
            case "cbus":
                cbus.status.receivedMessagesBuffer.push(msg);
                while (cbus.status.receivedMessagesBuffer().length > 20) {
                    cbus.status.receivedMessagesBuffer.shift();
                }
                if (msg.Direction === "received") {
                    var mh = messageHandlers.filter(handler => handler.opCode === msg.Message.OpCode || handler.opCode === msg.Message.OpCodeString);
                    for (var x = 0; x < mh.length; x++) {
                        mh[x].handler(msg.Message);
                    }
                }

                break;
            case "connection-status":
                cbus.status.cbusConnected(msg.IsConnected);
                break;
            default:
                console.warn("Unknown websocket message received: ", d.data);
        }
    };
    socket.onopen = () => {
        cbus.status.socketConnected(true);
    };
    socket.onclose = () => {
        cbus.status.socketConnected(false);
    };

    //TODO: reconnect socket, handle errors


    cbus.loadData = function () {
        $("#dialog-load-config").modal("show");
    };
    var lastFile;
    cbus.loadData.file = function(a, b, c) {
        b.target.files[0].text().then((f) => {
            lastFile = f;
        });
    }

    cbus.loadData.load = function() {
        const config = JSON.parse(lastFile);
        cbus.modules.loadData(config.modules);
    };

    cbus.saveData = function () {
        const d = {};
        d.modules = cbus.modules.getData();

        const e = document.createElement("a");
        e.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(JSON.stringify(d, null, 4)));
        e.setAttribute("download", "fcu.json");
        e.style.display = "none";
        document.body.appendChild(e);
        e.click();
        document.body.removeChild(e);
    };

})(window, ko, jQuery);
(function (cbus, ko, $) {

    function node(config, type) {
        this.nodeType = type;
        this.nodeNumber = config.NodeNumber;
        this.name = ko.observable('Unnamed Node');
        this.canId = config.CanId;
        this.isConsumerNode = config.IsConsumerNode;
        this.isProducerNode = config.IsProducerNode;
        this.inFlimMode = config.InFlimMode;
        this.supportsBootloader = config.SupportsBootloader;

        this.params = ko.observableArray([]);

        this.manufacturerId = ko.computed(() => {
            if (this.params()[1] !== undefined) {
                return this.params()[1];
            }
            return -1;
        });

        this.moduleId = ko.computed(() => {
            if (this.params()[3] !== undefined) {
                return this.params()[3];
            }
            return -1;
        });

        this.minorVersion = ko.computed(() => {
            if (this.params()[2] !== undefined) {
                return String.fromCharCode(this.params()[2]);
            } else {
                return "?";
            }
        });

        this.majorVersion = ko.computed(() => {
            if (this.params()[7] !== undefined) {
                return this.params()[7];
            } else {
                return "";
            }
        });

        this.version = ko.computed(() => {
            return `${this.majorVersion()}${this.minorVersion()}`;
        });

        this.supportedNodeVariables = ko.computed(() => {
            if (this.params()[6] !== undefined) {
                return this.params()[6];
            }
            return -1;
        });


        this.nodeVariables = ko.observableArray([]);
        this.params.subscribe(() => {
            if (this.supportedNodeVariables() !== -1) {
                if (this.nodeVariables().length < this.supportedNodeVariables()) {
                    for (let x = 1; x <= this.supportedNodeVariables(); x++) {
                        if (!this.nodeVariables().find((nv) => nv.index === x)) {
                            this.nodeVariables.push({
                                index: x,
                                value: ko.observable(0)
                            });
                        }
                    }
                }
            }
        });

        this._rawNVs = {};

        this.producedEvents = ko.observableArray([]);
    }

    node.prototype.editName = function() {
        cbus.modules.currentNode(this);
        $("#dialog-edit-node-name").modal("show");
        $("#dialog-edit-node-name-input").select();
    };
    node.prototype.editNodeVariables = function () {
        if (this.supportedNodeVariables() !== -1) {
            cbus.modules.currentNode(this);
            $("#dialog-edit-node-variables").modal("show");
        } else {
            console.warn('Unknown node variables count - unable to display NV editor');
        }
    };
    node.prototype.closeEditNodeVariables = function() {
        $("#dialog-edit-node-variables").modal("hide");
        cbus.modules.currentNode(null);
    };
    node.prototype.readNodeVariables = function() {
        cbus.api.sendApiRequest("Manager", "ReadNodeVariables", {
            NodeNumber: this.nodeNumber,
            VariableCount: this.supportedNodeVariables()
        });
    };
    node.prototype.getNodeVariable = function (nvIndex) {
        const nv = this.getNV(nvIndex);
        if (nv != null) {
            return nv.value();
        }
        return -1;
    };

    node.prototype.getNV = function(nvIndex) {
        if (this._rawNVs[nvIndex]) {
            return this._rawNVs[nvIndex];
        }
        this._rawNVs[nvIndex] = this.nodeVariables().find((n) => n.index === nvIndex);
        return this._rawNVs[nvIndex];
    };
    node.prototype.addEvent = function(eventNumber) {
        if (!this.producedEvents().find((pe) => pe.eventNumber === eventNumber)) {
            this.producedEvents.push({
                eventNumber: eventNumber,
                name: `Event ${this.nodeNumber}:${eventNumber}`
            });
        }
    }


    var id = 0;

    cbus.modules = {
        definitions: {},
        list: ko.observableArray(),
        listFilter: ko.observable(""),
        nodeSelectorFilter: ko.observable(""),
        shortEvents: ko.observableArray([]),
        currentNode: ko.observable(null),
        selectedNode: ko.observable(null),
        eventsNode: ko.observable(null),
        getData: function() {
            return JSON.parse(ko.toJSON(cbus.modules.list,
                function(k, v) {
                    if (k === "nodeType")
                        return;

                    return v;
                }));
        },
        loadData: function(d) {
            cbus.modules.list([]);
            for (let i in d) {
                const n = d[i];
                let md = null;
                for (let m in cbus.modules.definitions) {
                    let check = cbus.modules.definitions[m];
                    if (check.manufacturerId === n.manufacturerId && check.moduleId === n.moduleId) {
                        md = check;
                        break;
                    }
                }
                if (md == null) {
                    md = cbus.modules.definitions["UNKNOWN"];
                }
                const ni = new node({
                    NodeNumber: n.nodeNumber,
                    CanId: n.canId,
                    IsConsumerNode: n.isConsumerNode,
                    IsProducerNode: n.isProducerNode,
                    InFlimMode: n.inFlimMode,
                    SupportsBootloader: n.supportsBootloader
                }, md);
                ni.params(n.params);
                ni.producedEvents(n.producedEvents);
                cbus.modules.list.push(ni);
            }
        },
        getByNodeNumber: (n) => {
            var f = cbus.modules.list().filter(m => m.nodeNumber === n);
            if (f.length) {
                return f[0];
            }
            return null;
        },
        getId: (d) => {
            if (d.__id == undefined) {
                d.__id = ++id;
            }
            return "module-nv-" + d.__id;
        },
        selectNode: (n) => {
            cbus.modules.selectedNode(n);
        }
    };

    function filterNodes(f) {
        return cbus.modules.list().filter((m) => {
            const filter = f.toUpperCase();
            return m.nodeNumber.toString().indexOf(filter) > -1 ||
                m.nodeType.name.toUpperCase().indexOf(filter) > -1 ||
                m.name().toUpperCase().indexOf(filter) > -1;
        });
    }

    cbus.modules.filteredList = ko.computed(() => {
        if (cbus.modules.listFilter() === "")
            return cbus.modules.list();

        return filterNodes(cbus.modules.listFilter());
    });

    cbus.modules.nodeSelectorList = ko.computed(() => {
        if (cbus.modules.nodeSelectorFilter() === "")
            return cbus.modules.list();

        return filterNodes(cbus.modules.nodeSelectorFilter().toUpperCase());

    });

    cbus.modules.nodeSelector = (a, b, c, d) => {
        $(".node-selector").hide();
        const node = $(b.target).closest(".node");
        
        const selector = $(node).nextAll(".node-selector");
        selector.show();
        selector.click(function(e) {
            e.stopPropagation();
        });

        b.stopPropagation();
    };
    $(document).click(function() {
        $(".node-selector").hide();
        cbus.modules.nodeSelectorFilter("");
    });

    cbus.comms.addHandler("PNN", (msg) => {
        let md = null;
        for (let m in cbus.modules.definitions) {
            let check = cbus.modules.definitions[m];
            if (check.manufacturerId === msg.ManufacturerId && check.moduleId === msg.ModuleId) {
                md = check;
                break;
            }
        }
        if (md == null) {
            md = cbus.modules.definitions["UNKNOWN"];
        }
        const n = new node(msg, md);
        cbus.modules.list.remove(m => m.canId === n.canId);
        cbus.modules.list.push(n);
    });

    cbus.comms.addHandler(0x9B, (msg) => {
        var n = cbus.modules.getByNodeNumber(msg.NodeNumber);
        n.params()[msg.ParameterIndex] = msg.ParameterValue;
        n.params.notifySubscribers();
    });

    cbus.comms.addHandler(0x97,
        (msg) => {
            const n = cbus.modules.getByNodeNumber(msg.NodeNumber);
            
            const nv = n.nodeVariables().find(x => x.index === msg.VariableIndex);
            if (nv != null) {
                nv.value(msg.VariableValue);
            }
        });

    cbus.comms.addHandler("ACON",
        (msg) => {
            const n = cbus.modules.getByNodeNumber(msg.NodeNumber);
            n.addEvent(msg.EventNumber);
        });

    cbus.comms.addHandler("ACOF",
        (msg) => {
            const n = cbus.modules.getByNodeNumber(msg.NodeNumber);
            n.addEvent(msg.EventNumber);
        });


})(window.cbus, ko, jQuery);

cbus.modules.definitions["CANACC4"] = {
    manufacturerId: 165,
    moduleId: 8,
    name: "CANACC4",
    configTabs: [
        {
            name: "General",
            items: [
                {
                    name: "Recharge Time",
                    type: "numeric",
                    nv: 9
                }, {
                    name: "Fire Delay",
                    type: "numeric",
                    nv: 10
                }
            ]
        }, {
            name: "Output Timings",
            items: [
                {
                    name: "Pulse Duration Output 1 A",
                    type: "numeric",
                    nv: 1
                }, {
                    name: "Pulse Duration Output 1 B",
                    type: "numeric",
                    nv: 2
                }, {
                    name: "Pulse Duration Output 2 A",
                    type: "numeric",
                    nv: 3
                }, {
                    name: "Pulse Duration Output 2 B",
                    type: "numeric",
                    nv: 4
                }, {
                    name: "Pulse Duration Output 3 A",
                    type: "numeric",
                    nv: 5
                }, {
                    name: "Pulse Duration Output 3 B",
                    type: "numeric",
                    nv: 6
                }, {
                    name: "Pulse Duration Output 4 A",
                    type: "numeric",
                    nv: 7
                }, {
                    name: "Pulse Duration Output 4 B",
                    type: "numeric",
                    nv: 8
                }
            ]
        }
    ]
};


function generateGeneralInput(index) {
    return {
        group: "Input " + index,
        items: [
            {
                name: "On/Off or On selection",
                type: "flag",
                nv: 1,
                flagValue: (1 << (8-index))
            }, {
                name: "Invert Input",
                type: "flag",
                nv: 2,
                flagValue: (1 << (8 - index))
            }, {
                name: "Push button toggle",
                type: "flag",
                nv: 6,
                flagValue: (1 << (8 - index))
            }
        ]
    }
}

function generateAdvancedInput(index) {
    return {
        group: "Input " + index,
        items: [
            {
                name: "Delayed Input",
                type: "flag",
                nv: 3,
                flagValue: (1 << (8 - index))
            }, {
                name: "Disable SOD",
                type: "flag",
                nv: 8,
                flagValue: (1 << (8 - index))
            }
        ]
    };
}

cbus.modules.definitions["CANACE8C"] = {
    manufacturerId: 165,
    moduleId: 5,
    name: "CANACE8C",
    configTabs: [
        {
            name: "General",
            items: [
                {
                    //Example of creating an input group based on specifying all values
                    group: "Input 1",
                    items: [
                        {
                            name: "On/Off or On selection",
                            type: "flag",
                            nv: 1,
                            flagValue: 128
                        }, {
                            name: "Invert Input",
                            type: "flag",
                            nv: 2,
                            flagValue: 128
                        }, {
                            name: "Push button toggle",
                            type: "flag",
                            nv: 6,
                            flagValue: 128
                        }
                    ]

                },
                //The rest of the inputs are generated using a function returning a template item
                //It saves a lot of repetition, though you could repeat the above for all 8
                generateGeneralInput(2),
                generateGeneralInput(3),
                generateGeneralInput(4),
                generateGeneralInput(5),
                generateGeneralInput(6),
                generateGeneralInput(7),
                generateGeneralInput(8)
            ]
        }, {
            name: "Advanced",
            items: [
                {
                    //Again, first input is created by specifying all values
                    group: "Input 1",
                    items: [
                        {
                            name: "Delayed Input",
                            type: "flag",
                            nv: 3,
                            flagValue: 128
                        }, {
                            name: "Disable SOD",
                            type: "flag",
                            nv: 8,
                            flagValue: 128
                        }
                    ]
                },
                //And the others are done using a template function
                generateAdvancedInput(2),
                generateAdvancedInput(3),
                generateAdvancedInput(4),
                generateAdvancedInput(5),
                generateAdvancedInput(6),
                generateAdvancedInput(7),
                generateAdvancedInput(8),
                {
                    name: "Input delay, ON time",
                    type: "numeric",
                    nv: 4
                }, {
                    name: "Input delay, OFF time",
                    type: "numeric",
                    nv: 5
                }
            ]
        }
    ]
};
const ioTypes = [
    {
        name: "Input",
        value: 0
    }, {
        name: "Output",
        value: 1
    }, {
        name: "Servo",
        value: 2
    }, {
        name: "Bounce",
        value: 3
    }, {
        name: "Multi",
        value: 4
    }, {
        name: "Analogue",
        value: 5
    }, {
        name: "Magnet",
        value: 6
    }
];

function generateIO(index, baseNv) {
    return {
        group: "I/O " + index,
            items: [
                {
                    name: "Type",
                    type: "select",
                    nv: baseNv,
                    selectValues: ioTypes
                }, {
                    group: "Flags",
                    items: [
                        {
                            name: "Trigger Inverted",
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 1
                        }, {
                            name: "Cutoff",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t === 2 || t === 3 || t === 4;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 2
                        }, {
                            name: "Startup",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t === 1 || t === 2 || t === 3 || t === 4;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 4
                        }, {
                            name: "Disable Off",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t !== 4;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 8
                        }, {
                            name: "Toggle",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t === 0;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 16
                        }, {
                            name: "Action Inverted",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t === 1 || t === 2 || t === 3 || t === 4;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 32
                        }, {
                            name: "Event Inverted",
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 64
                        }, {
                            name: "Action Expedited",
                            visible: (n) => {
                                const t = n.getNodeVariable(baseNv);
                                return t === 1;
                            },
                            type: "flag",
                            nv: baseNv + 1,
                            flagValue: 128
                        }
                    ]
                }, {
                    group: "Input options",
                    visible: (n) => n.getNodeVariable(baseNv) === 0,
                    items: [
                        {
                            name: "ON delay",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "OFF delay",
                            type: "numeric",
                            nv: baseNv + 3
                        }
                    ]
                }, {
                    group: "Output options",
                    visible: (n) => n.getNodeVariable(baseNv) === 1,
                    items: [
                        {
                            name: "Pulse duration",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "Flash duration",
                            type: "numeric",
                            nv: baseNv + 3
                        }
                    ]
                }, {
                    group: "Server options",
                    visible: (n) => n.getNodeVariable(baseNv) === 2,
                    items: [
                        {
                            name: "OFF Pos",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "ON Pos",
                            type: "numeric",
                            nv: baseNv + 3
                        }, {
                            name: "OFF to ON speed",
                            type: "numeric",
                            nv: baseNv + 4
                        }, {
                            name: "ON to OFF speed",
                            type: "numeric",
                            nv: baseNv + 5
                        }
                    ]
                }, {
                    group: "Bounce options",
                    visible: (n) => n.getNodeVariable(baseNv) === 3,
                    items: [
                        {
                            name: "Upper Pos",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "Lower Pos",
                            type: "numeric",
                            nv: baseNv + 3
                        }, {
                            name: "Bounce coefficient",
                            type: "numeric",
                            nv: baseNv + 4
                        }, {
                            name: "Pull speed",
                            type: "numeric",
                            nv: baseNv + 5
                        }, {
                            name: "Pull pause",
                            type: "numeric",
                            nv: baseNv + 6
                        }
                    ]
                }, {
                    group: "Multi options",
                    visible: (n) => n.getNodeVariable(baseNv) === 4,
                    items: [
                        {
                            name: "Num Pos",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "Pos 1",
                            type: "numeric",
                            nv: baseNv + 3
                        }, {
                            name: "Pos 2",
                            type: "numeric",
                            nv: baseNv + 4
                        }, {
                            name: "Pos 3",
                            type: "numeric",
                            nv: baseNv + 5
                        }, {
                            name: "Pos 4",
                            type: "numeric",
                            nv: baseNv + 6
                        }
                    ]
                }, {
                    group: "Analogue options",
                    //TODO: check why not IO 12? mistake on the wiki?
                    visible: (n) => n.getNodeVariable(baseNv) === 5 && (index === 9 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15 || index === 16),
                    items: [
                        {
                            name: "Threshold",
                            type: "numeric",
                            nv: baseNv + 3
                        }, {
                            name: "Hysteresis",
                            type: "numeric",
                            nv: baseNv + 4
                        }
                    ]
                }, {
                    group: "Magnet options",
                    //TODO: check why not IO 12? mistake on the wiki?
                    visible: (n) => n.getNodeVariable(baseNv) === 6 && (index === 9 || index === 10 || index === 11 || index === 13 || index === 14 || index === 15 || index === 16),
                    items: [
                        {
                            name: "Do Setup",
                            type: "numeric",
                            nv: baseNv + 2
                        }, {
                            name: "Threshold",
                            type: "numeric",
                            nv: baseNv + 3
                        }, {
                            name: "Hysteresis",
                            type: "numeric",
                            nv: baseNv + 4
                        }, {
                            name: "Offset H",
                            type: "numeric",
                            nv: baseNv + 4
                        }, {
                            name: "Offset L",
                            type: "numeric",
                            nv: baseNv + 5
                        }
                    ]
                }
            ]
    }
}

cbus.modules.definitions["CANMIO"] = {
    manufacturerId: 165,
    moduleId: 32,
    name: "CANMIO",
    configTabs: [
        {
            name: "General",
            items: [
                {
                    name: "Produced Startup Delay",
                    type: "numeric",
                    nv: 1
                }, {
                    name: "HB Delay",
                    type: "numeric",
                    nv: 2
                }, {
                    name: "Servo Speed",
                    type: "numeric",
                    nv: 3
                }, {
                    name: "PORTB Pull-ups enable",
                    type: "bitfield",
                    nv: 4
                }
            ]
        }, {
            name: "IO 1-8",
            items: [
                generateIO(1, 16),
                generateIO(2, 23),
                generateIO(3, 30),
                generateIO(4, 37),
                generateIO(5, 44),
                generateIO(6, 51),
                generateIO(7, 58),
                generateIO(8, 65)
            ]
        }, {
            name: "IO 9-16",
            items: [
                generateIO(9, 72),
                generateIO(10, 79),
                generateIO(11, 86),
                generateIO(12, 93),
                generateIO(13, 100),
                generateIO(14, 107),
                generateIO(15, 114),
                generateIO(16, 121)
            ]
        }

        /*,
        generateIO(1, 16),
        generateIO(2, 23),
        generateIO(3, 30),
        generateIO(4, 37),
        generateIO(5, 44),
        generateIO(6, 51),
        generateIO(7, 58),
        generateIO(8, 65),
        generateIO(9, 72),
        generateIO(10, 79),
        generateIO(11, 86),
        generateIO(12, 93),
        generateIO(13, 100),
        generateIO(14, 107),
        generateIO(15, 114),
        generateIO(16, 121)*/
    ]
};
cbus.modules.definitions["UNKNOWN"] = {
    manufacturerId: -1,
    moduleId: -1,
    name: "Unknown",
    configTabs: []
};
// Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


ko.applyBindings(window.cbus);

window.cbus.oncbusmessage = (msg) => {
    console.log(msg.DisplayString, msg);
};


$(".event").draggable();