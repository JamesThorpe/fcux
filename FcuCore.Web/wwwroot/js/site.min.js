/* jQuery Tiny Pub/Sub - v0.7 - 10/27/2011
 * http://benalman.com/
 * Copyright (c) 2011 "Cowboy" Ben Alman; Licensed MIT, GPL */
(function (a) {
    var b = a({});
    a.subscribe = function () { b.on.apply(b, arguments) }, a.unsubscribe = function () { b.off.apply(b, arguments) }, a
        .publish = function () { b.trigger.apply(b, arguments) }
})(jQuery);
(function (window, ko, $) {
    const cbus = {};
    window.cbus = cbus;
    cbus.status = {
        socketConnected: ko.observable(false),
        cbusConnected: ko.observable(false),
        receivedMessagesBuffer: ko.observableArray(),
        showMessages: ko.observable(false),
        toggleDebug: () => cbus.status.showMessages(!cbus.status.showMessages())
    };

    cbus.api = {
        sendApiRequest: (controller, action, data) => {
            $.ajax({
                url: `/api/${controller}/${action}`,
                data: data,
                contentType: 'application/json',
                method: 'POST'
            });
        },
        sendQNN: () => {
            cbus.api.sendApiRequest("Manager", "Communications", '"enumerate"');
        }
    };

    const messageHandlers = [];
    cbus.comms = {
        connect: () => {
            cbus.api.sendApiRequest("Manager", "Communications",'"open"');
        },
        disconnect: () => {
            cbus.api.sendApiRequest("Manager", "Communications",'"close"');
        },
        addHandler: (opCode, handler) => {
            messageHandlers.push({ opCode: opCode, handler: handler });
        }
    };


    const socket = new WebSocket("ws://" + window.location.host + "/ws");
    socket.onmessage = (d) => {
        var msg = JSON.parse(d.data);
        switch (msg.Type) {
            case "cbus":
                cbus.status.receivedMessagesBuffer.push(msg.Message);
                while (cbus.status.receivedMessagesBuffer().length > 20) {
                    cbus.status.receivedMessagesBuffer.shift();
                }
                var mh = messageHandlers.filter(handler => handler.opCode === msg.Message.OpCode);
                for (var x = 0; x < mh.length; x++) {
                    mh[x].handler(msg.Message);
                }
                
                break;
            case "connection-status":
                cbus.status.cbusConnected(msg.IsConnected);
                break;
            default:
                console.warn("Unknown websocket message received: ", d.data);
        }
    };
    socket.onopen = () => {
        cbus.status.socketConnected(true);
    };
    socket.onclose = () => {
        cbus.status.socketConnected(false);
    };

    //TODO: reconnect socket, handle errors


})(window, ko, jQuery);
class CbusModule {
    constructor(canId, definition) {
        this.CanId = canId;
        this.Definition = definition;
        this.IsConsumerNode = false;
        this.IsProducerNode = false;
        this.InFlimMode = false;
        this.SupportsBootloader = false;
    }
}

(function (cbus) {



    cbus.modules = {
        definitions: {},
        list: ko.observableArray()
    };

    cbus.comms.addHandler(0xB6, (msg) => {
        for (let m in cbus.modules.definitions) {
            const md = cbus.modules.definitions[m];
            if (md.ManufacturerId === msg.ManufacturerId && md.ModuleId === msg.ModuleId) {
                const module = new CbusModule(msg.CanId, md);
                module.IsConsumerNode = msg.IsConsumerNode;
                module.IsProducerNode = msg.IsProducerNode;
                module.InFlimMode = msg.InFlimMode;
                module.SupportsBootloader = msg.SupportsBootloader;
                cbus.modules.list.push(module);
                break;
            }
        }
    });

})(window.cbus);
cbus.modules.definitions.canacc4 = {
    ManufacturerId: 165,
    ModuleId: 8,
    Name: 'CANACC4'
}
cbus.modules.definitions.canace8c = {
    ManufacturerId: 165,
    ModuleId: 5,
    Name: 'CANACE8C'
}
// Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


ko.applyBindings(window.cbus);

window.cbus.oncbusmessage = (msg) => {
    console.log(msg.DisplayString, msg);
};
